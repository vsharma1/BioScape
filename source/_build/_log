### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules main.ml > main.ml.depends # cached
# Target: environment.mli.depends, tags: { extension:mli, file:environment.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules environment.mli > environment.mli.depends # cached
# Target: definition.mli.depends, tags: { extension:mli, file:definition.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules definition.mli > definition.mli.depends # cached
# Target: choice.mli.depends, tags: { extension:mli, file:choice.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules choice.mli > choice.mli.depends # cached
# Target: action.mli.depends, tags: { extension:mli, file:action.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules action.mli > action.mli.depends # cached
# Target: env.mli.depends, tags: { extension:mli, file:env.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules env.mli > env.mli.depends # cached
# Target: typ.mli.depends, tags: { extension:mli, file:typ.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules typ.mli > typ.mli.depends # cached
# Target: typ.cmi, tags: { byte, compile, extension:mli, file:typ.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o typ.cmi typ.mli # cached
# Target: env.cmi, tags: { byte, compile, extension:mli, file:env.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o env.cmi env.mli # cached
# Target: pattern.mli.depends, tags: { extension:mli, file:pattern.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules pattern.mli > pattern.mli.depends # cached
# Target: value.mli.depends, tags: { extension:mli, file:value.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules value.mli > value.mli.depends # cached
# Target: shape.mli.depends, tags: { extension:mli, file:shape.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules shape.mli > shape.mli.depends # cached
# Target: shape.cmi, tags: { byte, compile, extension:mli, file:shape.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o shape.cmi shape.mli # cached
# Target: value.cmi, tags: { byte, compile, extension:mli, file:value.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o value.cmi value.mli # cached
# Target: pattern.cmi, tags: { byte, compile, extension:mli, file:pattern.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o pattern.cmi pattern.mli # cached
# Target: action.cmi, tags: { byte, compile, extension:mli, file:action.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o action.cmi action.mli # cached
# Target: process.mli.depends, tags: { extension:mli, file:process.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules process.mli > process.mli.depends # cached
# Target: species.mli.depends, tags: { extension:mli, file:species.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules species.mli > species.mli.depends # cached
# Target: species.cmi, tags: { byte, compile, extension:mli, file:species.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o species.cmi species.mli # cached
# Target: process.cmi, tags: { byte, compile, extension:mli, file:process.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o process.cmi process.mli # cached
# Target: substore.mli.depends, tags: { extension:mli, file:substore.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules substore.mli > substore.mli.depends # cached
# Target: subrecord.mli.depends, tags: { extension:mli, file:subrecord.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules subrecord.mli > subrecord.mli.depends # cached
# Target: subrecord.cmi, tags: { byte, compile, extension:mli, file:subrecord.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o subrecord.cmi subrecord.mli # cached
# Target: substore.cmi, tags: { byte, compile, extension:mli, file:substore.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o substore.cmi substore.mli # cached
# Target: volume.mli.depends, tags: { extension:mli, file:volume.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules volume.mli > volume.mli.depends # cached
# Target: utils.mli.depends, tags: { extension:mli, file:utils.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules utils.mli > utils.mli.depends # cached
# Target: utils.cmi, tags: { byte, compile, extension:mli, file:utils.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o utils.cmi utils.mli # cached
# Target: volume.cmi, tags: { byte, compile, extension:mli, file:volume.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o volume.cmi volume.mli # cached
# Target: choice.cmi, tags: { byte, compile, extension:mli, file:choice.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o choice.cmi choice.mli # cached
# Target: definition.cmi, tags: { byte, compile, extension:mli, file:definition.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o definition.cmi definition.mli # cached
# Target: environment.cmi, tags: { byte, compile, extension:mli, file:environment.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o environment.cmi environment.mli # cached
# Target: io.mli.depends, tags: { extension:mli, file:io.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules io.mli > io.mli.depends # cached
# Target: io.cmi, tags: { byte, compile, extension:mli, file:io.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o io.cmi io.mli # cached
# Target: lexer.mli.depends, tags: { extension:mli, file:lexer.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules lexer.mli > lexer.mli.depends # cached
# Target: parser.mly, tags: { extension:mly, file:parser.mly, ocaml, ocamlyacc, parser, quiet }
/usr/local/bin/ocamlyacc parser.mly # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o parser.cmi parser.mli # cached
# Target: lexer.cmi, tags: { byte, compile, extension:mli, file:lexer.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o lexer.cmi lexer.mli # cached
# Target: simulator.mli.depends, tags: { extension:mli, file:simulator.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules simulator.mli > simulator.mli.depends # cached
# Target: term.mli.depends, tags: { extension:mli, file:term.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules term.mli > term.mli.depends # cached
# Target: heap.mli.depends, tags: { extension:mli, file:heap.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules heap.mli > heap.mli.depends # cached
# Target: heap.cmi, tags: { byte, compile, extension:mli, file:heap.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o heap.cmi heap.mli # cached
# Target: store.mli.depends, tags: { extension:mli, file:store.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules store.mli > store.mli.depends # cached
# Target: record.mli.depends, tags: { extension:mli, file:record.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules record.mli > record.mli.depends # cached
# Target: imap.mli.depends, tags: { extension:mli, file:imap.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules imap.mli > imap.mli.depends # cached
# Target: imap.cmi, tags: { byte, compile, extension:mli, file:imap.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o imap.cmi imap.mli # cached
# Target: record.cmi, tags: { byte, compile, extension:mli, file:record.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o record.cmi record.mli # cached
# Target: store.cmi, tags: { byte, compile, extension:mli, file:store.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o store.cmi store.mli # cached
# Target: term.cmi, tags: { byte, compile, extension:mli, file:term.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o term.cmi term.mli # cached
# Target: simulator.cmi, tags: { byte, compile, extension:mli, file:simulator.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o simulator.cmi simulator.mli # cached
# Target: main.cmo, tags: { byte, compile, extension:ml, file:main.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o main.cmo main.ml # cached
# Target: environment.ml.depends, tags: { extension:ml, file:environment.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules environment.ml > environment.ml.depends # cached
# Target: environment.cmo, tags: { byte, compile, extension:ml, file:environment.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o environment.cmo environment.ml # cached
# Target: io.ml.depends, tags: { extension:ml, file:io.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules io.ml > io.ml.depends # cached
# Target: io.cmo, tags: { byte, compile, extension:ml, file:io.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o io.cmo io.ml # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/local/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules lexer.ml > lexer.ml.depends # cached
# Target: lexer.cmo, tags: { byte, compile, extension:ml, file:lexer.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o lexer.cmo lexer.ml # cached
# Target: process.ml.depends, tags: { extension:ml, file:process.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules process.ml > process.ml.depends # cached
# Target: process.cmo, tags: { byte, compile, extension:ml, file:process.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o process.cmo process.ml # cached
# Target: simulator.ml.depends, tags: { extension:ml, file:simulator.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules simulator.ml > simulator.ml.depends # cached
# Target: simulator.cmo, tags: { byte, compile, extension:ml, file:simulator.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o simulator.cmo simulator.ml # cached
# Target: term.ml.depends, tags: { extension:ml, file:term.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules term.ml > term.ml.depends # cached
# Target: term.cmo, tags: { byte, compile, extension:ml, file:term.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o term.cmo term.ml # cached
# Target: typ.ml.depends, tags: { extension:ml, file:typ.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules typ.ml > typ.ml.depends # cached
# Target: typ.cmo, tags: { byte, compile, extension:ml, file:typ.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o typ.cmo typ.ml # cached
# Target: volume.ml.depends, tags: { extension:ml, file:volume.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules volume.ml > volume.ml.depends # cached
# Target: volume.cmo, tags: { byte, compile, extension:ml, file:volume.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o volume.cmo volume.ml # cached
# Target: definition.ml.depends, tags: { extension:ml, file:definition.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules definition.ml > definition.ml.depends # cached
# Target: definition.cmo, tags: { byte, compile, extension:ml, file:definition.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o definition.cmo definition.ml # cached
# Target: pattern.ml.depends, tags: { extension:ml, file:pattern.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules pattern.ml > pattern.ml.depends # cached
# Target: pattern.cmo, tags: { byte, compile, extension:ml, file:pattern.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o pattern.cmo pattern.ml # cached
# Target: shape.ml.depends, tags: { extension:ml, file:shape.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules shape.ml > shape.ml.depends # cached
# Target: shape.cmo, tags: { byte, compile, extension:ml, file:shape.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o shape.cmo shape.ml # cached
# Target: value.ml.depends, tags: { extension:ml, file:value.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules value.ml > value.ml.depends # cached
# Target: value.cmo, tags: { byte, compile, extension:ml, file:value.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o value.cmo value.ml # cached
# Target: choice.ml.depends, tags: { extension:ml, file:choice.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules choice.ml > choice.ml.depends # cached
# Target: choice.cmo, tags: { byte, compile, extension:ml, file:choice.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o choice.cmo choice.ml # cached
# Target: action.ml.depends, tags: { extension:ml, file:action.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules action.ml > action.ml.depends # cached
# Target: action.cmo, tags: { byte, compile, extension:ml, file:action.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o action.cmo action.ml # cached
# Target: substore.ml.depends, tags: { extension:ml, file:substore.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules substore.ml > substore.ml.depends # cached
# Target: substore.cmo, tags: { byte, compile, extension:ml, file:substore.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o substore.cmo substore.ml # cached
# Target: env.ml.depends, tags: { extension:ml, file:env.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules env.ml > env.ml.depends # cached
# Target: env.cmo, tags: { byte, compile, extension:ml, file:env.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o env.cmo env.ml # cached
# Target: species.ml.depends, tags: { extension:ml, file:species.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules species.ml > species.ml.depends # cached
# Target: species.cmo, tags: { byte, compile, extension:ml, file:species.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o species.cmo species.ml # cached
# Target: subrecord.ml.depends, tags: { extension:ml, file:subrecord.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules subrecord.ml > subrecord.ml.depends # cached
# Target: subrecord.cmo, tags: { byte, compile, extension:ml, file:subrecord.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o subrecord.cmo subrecord.ml # cached
# Target: utils.ml.depends, tags: { extension:ml, file:utils.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules utils.ml > utils.ml.depends # cached
# Target: utils.cmo, tags: { byte, compile, extension:ml, file:utils.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o utils.cmo utils.ml # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmo, tags: { byte, compile, extension:ml, file:parser.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o parser.cmo parser.ml # cached
# Target: record.ml.depends, tags: { extension:ml, file:record.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules record.ml > record.ml.depends # cached
# Target: record.cmo, tags: { byte, compile, extension:ml, file:record.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o record.cmo record.ml # cached
# Target: imap.ml.depends, tags: { extension:ml, file:imap.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules imap.ml > imap.ml.depends # cached
# Target: imap.cmo, tags: { byte, compile, extension:ml, file:imap.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o imap.cmo imap.ml # cached
# Target: heap.ml.depends, tags: { extension:ml, file:heap.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules heap.ml > heap.ml.depends # cached
# Target: heap.cmo, tags: { byte, compile, extension:ml, file:heap.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o heap.cmo heap.ml # cached
# Target: store.ml.depends, tags: { extension:ml, file:store.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules store.ml > store.ml.depends # cached
# Target: store.cmo, tags: { byte, compile, extension:ml, file:store.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o store.cmo store.ml # cached
# Target: main.byte, tags: { byte, dont_link_with, extension:byte, file:main.byte, link, ocaml, program, quiet }
/usr/local/bin/ocamlc.opt typ.cmo env.cmo shape.cmo value.cmo pattern.cmo action.cmo species.cmo process.cmo subrecord.cmo substore.cmo io.cmo utils.cmo volume.cmo choice.cmo definition.cmo environment.cmo parser.cmo lexer.cmo imap.cmo record.cmo heap.cmo store.cmo term.cmo simulator.cmo main.cmo -o main.byte # cached
# Compilation successful.
