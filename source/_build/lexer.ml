# 1 "lexer.mll"
 
  exception Illegal_character
  type token = Parser.token
  type proc = Process.t
  type action = Action.t
  type position = Lexing.position

  let add_line (lexbuf) =
    let pos:position = Lexing.lexeme_end_p lexbuf in
    let pos:position = {pos with Lexing.pos_lnum = pos.Lexing.pos_lnum+1; Lexing.pos_bol = pos.Lexing.pos_cnum}
    in
       (*IF-FSHARP Lexing.lexbuf_set_curr_p lexbuf pos ENDIF-FSHARP*)
       (*IF-OCAML*) lexbuf.Lexing.lex_curr_p <- pos(*ENDIF-OCAML*)

  let remove_ends (s:string) = String.sub s 1 ((String.length s)-2)
  let char_of_string (s:string) = String.get s 0
  let keyword_table = Hashtbl.create 53
      let _ =
        List.iter (fun (kwd, tok) -> Hashtbl.add keyword_table kwd tok)
        [
          "and", Parser.AND ;
          "as" , Parser.AS ;
          "bool" , Parser.BOOL ;
          "case" , Parser.CASE ;
          "chan" , Parser.CHAN ;
          "char" , Parser.CHAR ;
          "cuboid", Parser.CUBOID ;
          "coord", Parser.COORD ;
          "delay" , Parser.DELAY ;
          "directive", Parser.DIRECTIVE ;
          "do" , Parser.DO ;
          "else" , Parser.ELSE ;
          "float" , Parser.FLOAT ;
          "false",Parser.FALSE;
          "if" , Parser.IF ;
          "in" , Parser.IN ;
          "int" , Parser.INT ;
          "let" , Parser.LET ;
          "list" , Parser.LIST ;
          "match" , Parser.MATCH ;
          "mov" , Parser.MOV ;
          "new", Parser.NEW ;
          "out" , Parser.OUT ;
          "or" , Parser.OR ;
          "of" , Parser.OF ;
          "plot", Parser.PLOT ;
          "proc" , Parser.PROC ;
          "replicate" , Parser.REPLICATE ;
          "run" , Parser.RUN ;
          "sample", Parser.SAMPLE ;
          "show" , Parser.SHOW ;
          "space", Parser.SPACE ;
          "sphere", Parser.SPHERE ;
          "string", Parser.STRING ;
          "sub", Parser.SUB ;
          "then" , Parser.THEN ;
          "true", Parser.TRUE;
          "type" , Parser.TYPE ;
          "val" , Parser.VAL ;
          "with" , Parser.WITH ;
          "float_of_int" , Parser.INT2FLOAT ;
          "int_of_float" , Parser.FLOAT2INT ;
          "sqrt" , Parser.SQRT ;
        ]

# 68 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\211\255\213\255\004\000\084\000\161\000\225\255\226\255\
    \232\255\053\000\213\000\235\255\063\000\237\255\238\255\068\000\
    \242\255\243\255\244\255\245\255\246\255\066\000\067\000\249\255\
    \037\000\251\255\252\255\101\000\254\255\255\255\212\255\228\255\
    \239\255\229\255\231\255\230\255\240\255\227\255\041\001\092\000\
    \221\255\171\000\105\000\217\255\107\000\108\000\109\000\220\255\
    \219\255\218\255\216\255\181\000\136\000\215\255\191\000\051\001\
    \133\000\061\001\073\001\222\255\215\000\048\001\049\001\008\001\
    \252\255\136\000\254\255\138\000\255\255\253\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\044\000\032\000\031\000\255\255\255\255\
    \255\255\022\000\021\000\255\255\019\000\255\255\255\255\014\000\
    \255\255\255\255\255\255\255\255\255\255\008\000\007\000\255\255\
    \005\000\255\255\255\255\002\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\041\000\
    \255\255\255\255\041\000\255\255\255\255\255\255\033\000\255\255\
    \255\255\003\000\255\255\003\000\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\060\000\255\255\255\255\000\000\000\000\
    \000\000\039\000\255\255\000\000\255\255\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\060\000\060\000\060\000\064\000\
    \000\000\255\255\000\000\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\029\000\028\000\000\000\000\000\029\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \029\000\020\000\003\000\000\000\000\000\000\000\059\000\009\000\
    \027\000\026\000\008\000\013\000\017\000\012\000\025\000\011\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\015\000\016\000\022\000\014\000\021\000\006\000\
    \007\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\024\000\255\255\023\000\019\000\010\000\
    \061\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\018\000\037\000\036\000\035\000\
    \034\000\033\000\032\000\040\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\031\000\030\000\
    \050\000\038\000\049\000\048\000\047\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\053\000\
    \057\000\069\000\057\000\004\000\068\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\054\000\
    \000\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\059\000\000\000\000\000\004\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\255\255\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000\
    \000\000\000\000\066\000\000\000\000\000\000\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \067\000\000\000\065\000\061\000\004\000\255\255\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \046\000\000\000\062\000\059\000\000\000\000\000\000\000\000\000\
    \000\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\000\000\
    \056\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\042\000\061\000\061\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
    \056\000\000\000\000\000\044\000\000\000\043\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\255\255\003\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\000\000\012\000\015\000\021\000\
    \022\000\022\000\024\000\039\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\027\000\027\000\
    \042\000\009\000\044\000\045\000\046\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\052\000\
    \056\000\065\000\056\000\004\000\067\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\005\000\
    \255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\060\000\255\255\255\255\010\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\003\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\255\255\
    \255\255\255\255\063\000\255\255\255\255\255\255\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \063\000\255\255\063\000\060\000\010\000\009\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \038\000\255\255\061\000\062\000\255\255\255\255\255\255\255\255\
    \255\255\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\255\255\
    \055\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\038\000\061\000\062\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\000\
    \055\000\255\255\255\255\038\000\255\255\038\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \063\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \061\000\062\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 67 "lexer.mll"
                  ( token lexbuf )
# 271 "lexer.ml"

  | 1 ->
# 68 "lexer.mll"
         ( add_line lexbuf; token lexbuf)
# 276 "lexer.ml"

  | 2 ->
# 69 "lexer.mll"
         ( Parser.LPAREN )
# 281 "lexer.ml"

  | 3 ->
# 70 "lexer.mll"
         ( Parser.RPAREN )
# 286 "lexer.ml"

  | 4 ->
# 71 "lexer.mll"
         ( Parser.DOT )
# 291 "lexer.ml"

  | 5 ->
# 72 "lexer.mll"
         ( Parser.LBRACKET )
# 296 "lexer.ml"

  | 6 ->
# 73 "lexer.mll"
         ( Parser.RBRACKET )
# 301 "lexer.ml"

  | 7 ->
# 74 "lexer.mll"
         ( Parser.LT )
# 306 "lexer.ml"

  | 8 ->
# 75 "lexer.mll"
         ( Parser.GT )
# 311 "lexer.ml"

  | 9 ->
# 76 "lexer.mll"
         ( Parser.BANG )
# 316 "lexer.ml"

  | 10 ->
# 77 "lexer.mll"
         ( Parser.CARAT )
# 321 "lexer.ml"

  | 11 ->
# 78 "lexer.mll"
         ( Parser.BAR )
# 326 "lexer.ml"

  | 12 ->
# 79 "lexer.mll"
         ( Parser.COMMA )
# 331 "lexer.ml"

  | 13 ->
# 80 "lexer.mll"
         ( Parser.SEMI )
# 336 "lexer.ml"

  | 14 ->
# 81 "lexer.mll"
         ( Parser.COLON )
# 341 "lexer.ml"

  | 15 ->
# 82 "lexer.mll"
         ( Parser.CONS )
# 346 "lexer.ml"

  | 16 ->
# 83 "lexer.mll"
         ( Parser.EMPTYLIST )
# 351 "lexer.ml"

  | 17 ->
# 84 "lexer.mll"
         ( Parser.EQUAL )
# 356 "lexer.ml"

  | 18 ->
# 85 "lexer.mll"
         ( Parser.PLUS )
# 361 "lexer.ml"

  | 19 ->
# 86 "lexer.mll"
         ( Parser.MINUS )
# 366 "lexer.ml"

  | 20 ->
# 87 "lexer.mll"
         ( Parser.SLASH )
# 371 "lexer.ml"

  | 21 ->
# 88 "lexer.mll"
         ( Parser.UNDERSCORE )
# 376 "lexer.ml"

  | 22 ->
# 89 "lexer.mll"
         ( Parser.PRIME )
# 381 "lexer.ml"

  | 23 ->
# 90 "lexer.mll"
         ( Parser.STAR )
# 386 "lexer.ml"

  | 24 ->
# 91 "lexer.mll"
         ( Parser.LTEQUAL )
# 391 "lexer.ml"

  | 25 ->
# 92 "lexer.mll"
         ( Parser.GTEQUAL )
# 396 "lexer.ml"

  | 26 ->
# 93 "lexer.mll"
         ( Parser.LTGT )
# 401 "lexer.ml"

  | 27 ->
# 94 "lexer.mll"
         ( Parser.NULL )
# 406 "lexer.ml"

  | 28 ->
# 95 "lexer.mll"
         ( Parser.ARROW )
# 411 "lexer.ml"

  | 29 ->
# 96 "lexer.mll"
         ( Parser.AT )
# 416 "lexer.ml"

  | 30 ->
# 97 "lexer.mll"
         ( Parser.QUESTION )
# 421 "lexer.ml"

  | 31 ->
# 99 "lexer.mll"
                  ( Parser.INTVALUE(int_of_string(Lexing.lexeme lexbuf)) )
# 426 "lexer.ml"

  | 32 ->
# 101 "lexer.mll"
    ( let s = Lexing.lexeme lexbuf in
        try Hashtbl.find keyword_table s
        with Not_found -> Parser.NAME(s)
    )
# 434 "lexer.ml"

  | 33 ->
# 105 "lexer.mll"
                                   (Parser.STRINGVALUE(remove_ends (Lexing.lexeme lexbuf)))
# 439 "lexer.ml"

  | 34 ->
# 106 "lexer.mll"
                                ( Parser.CHARVALUE(char_of_string (remove_ends (Lexing.lexeme lexbuf))) )
# 444 "lexer.ml"

  | 35 ->
# 107 "lexer.mll"
            ( Parser.CHARVALUE('\'') )
# 449 "lexer.ml"

  | 36 ->
# 108 "lexer.mll"
            ( Parser.CHARVALUE('\n') )
# 454 "lexer.ml"

  | 37 ->
# 109 "lexer.mll"
            ( Parser.CHARVALUE('\r') )
# 459 "lexer.ml"

  | 38 ->
# 110 "lexer.mll"
           ( Parser.CHARVALUE('\t') )
# 464 "lexer.ml"

  | 39 ->
# 111 "lexer.mll"
            ( Parser.CHARVALUE('\b') )
# 469 "lexer.ml"

  | 40 ->
# 113 "lexer.mll"
      ( Parser.CHARVALUE(char_of_string (remove_ends (Lexing.lexeme lexbuf)))
      )
# 475 "lexer.ml"

  | 41 ->
# 116 "lexer.mll"
      ( Parser.FLOATVALUE(float_of_string (Lexing.lexeme lexbuf))
      )
# 481 "lexer.ml"

  | 42 ->
# 118 "lexer.mll"
                    ( Parser.EOF )
# 486 "lexer.ml"

  | 43 ->
# 119 "lexer.mll"
            ( comment 1 lexbuf )
# 491 "lexer.ml"

  | 44 ->
# 120 "lexer.mll"
         ( raise Illegal_character )
# 496 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment n lexbuf =
    __ocaml_lex_comment_rec n lexbuf 63
and __ocaml_lex_comment_rec n lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 123 "lexer.mll"
            ( comment (n+1) lexbuf )
# 507 "lexer.ml"

  | 1 ->
# 124 "lexer.mll"
         ( add_line lexbuf; comment n lexbuf)
# 512 "lexer.ml"

  | 2 ->
# 125 "lexer.mll"
           ( if (n-1) > 0 then comment (n-1) lexbuf else token lexbuf)
# 517 "lexer.ml"

  | 3 ->
# 126 "lexer.mll"
          ( comment n lexbuf )
# 522 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec n lexbuf __ocaml_lex_state

;;

# 129 "lexer.mll"
 
  let format (pos:position) =
    "Line " ^ string_of_int pos.Lexing.pos_lnum ^
    " char " ^ string_of_int (pos.Lexing.pos_cnum - pos.Lexing.pos_bol) ^ ": "

  let parse_file (str:string) =
    let ic:in_channel = open_in str in
    let lexbuf = Lexing.from_channel ic in
      try Parser.main token lexbuf
      with
	  Illegal_character -> failwith (format (Lexing.lexeme_start_p lexbuf) ^ "Illegal character")
	| Parsing.Parse_error -> failwith (format (Lexing.lexeme_start_p lexbuf) ^ "Syntax error")

  let parse_string (str:string) =
    let lexbuf = Lexing.from_string str in
      try Parser.main token lexbuf
      with
	  Illegal_character -> failwith (format (Lexing.lexeme_start_p lexbuf) ^ "Illegal character")
	| Parsing.Parse_error -> failwith (format (Lexing.lexeme_start_p lexbuf) ^ "Syntax error")


# 550 "lexer.ml"
